Microsoft Windows [Version 10.0.22631.4602]
(c) Microsoft Corporation. All rights reserved.

C:\Users\user>mongo
'mongo' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\user>mongosh
Current Mongosh Log ID: 678b77602b37630ca7e8b9be
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.1
Using MongoDB:          7.0.5
Using Mongosh:          2.1.1
mongosh 2.2.3 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2025-01-07T09:43:44.658+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> show dbs
admin      40.00 KiB
cars        8.00 KiB
config    108.00 KiB
library     8.00 KiB
local      88.00 KiB
school     80.00 KiB
student    72.00 KiB
students  104.00 KiB
test       48.00 KiB
vans      160.00 KiB
test> use admin
switched to db admin
admin> use school
switched to db school
school> show dbs
admin      40.00 KiB
cars        8.00 KiB
config    108.00 KiB
library     8.00 KiB
local      88.00 KiB
school     80.00 KiB
student    72.00 KiB
students  104.00 KiB
test       48.00 KiB
vans      160.00 KiB
school> db.createCollection();
MongoshInvalidInputError: [COMMON-10001] Missing required argument at position 0 (Database.createCollection)
school> db.createCollection("student")
{ ok: 1 }
school> show dbs
admin      40.00 KiB
cars        8.00 KiB
config    108.00 KiB
library     8.00 KiB
local      88.00 KiB
school     80.00 KiB
student    72.00 KiB
students  104.00 KiB
test       48.00 KiB
vans      160.00 KiB
school> db.dropDatabase()
{ ok: 1, dropped: 'school' }
school> show dbs
admin      40.00 KiB
cars        8.00 KiB
config    108.00 KiB
library     8.00 KiB
local      88.00 KiB
student    72.00 KiB
students  104.00 KiB
test       48.00 KiB
vans      160.00 KiB
school> use school
already on db school
school> db.students
school.students
school> db.students.insertOne({name:"Spongebob"})
{
  acknowledged: true,
  insertedId: ObjectId('678b80b42b37630ca7e8b9bf')
}
school> db.students.insertOne({name:"Spongebob",age:30, gpa:.
.2})
{
  acknowledged: true,
  insertedId: ObjectId('678b81242b37630ca7e8b9c0')
}
school> db.students.find()
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  }
]
school> db.students.insertMany([{name:"Patrick", age:38, gpa:1.5},{name:"Sandy",age:27,gpa:4.0},{name:"Gary",age:18,gpa:2.5}])
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('678b82952b37630ca7e8b9c1'),
    '1': ObjectId('678b82952b37630ca7e8b9c2'),
    '2': ObjectId('678b82952b37630ca7e8b9c3')
  }
}
school> db.student.find()

school> db.students.find()
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  }
]
school> db.students.insertOne({name:"Larry",
... age:32,
... gpa:2.8,
... fullTime: false,})
{
  acknowledged: true,
  insertedId: ObjectId('678b88be2b37630ca7e8b9c4')
}
school> db.students.insertOne({name:"Larry",
... age:32,
... gpa:2.8,
... fullTime: false,
... registerDate: new Date(),
... gradutionDate: null,
... courses:["Biology","chemistry","calculus"],
... address:{street:"Bikini Bottom",
... city:"123 Fake st.",
... zip: 12345}})
{
  acknowledged: true,
  insertedId: ObjectId('678b8a242b37630ca7e8b9c5')
}
school> db.students.find()
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.find().sort({name:1})
[
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  },
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  }
]
school> db.students.find().sort({gpa:1})
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  }
]
school> db.students.find().sort({gpa:-1})
[
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' }
]
school> db.students.find().limit(1)
[ { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' } ]
school> db.students.find().limit(3)
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  }
]
school> db.students.find().sort({gpa:-1}).limit(1)
[
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  }
]
school> db.students.find().sort({gpa:1}).limit(1)
[ { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' } ]
school> db.students.find()
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.find({name:"Spongebob"})
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2
  }
]
school> db.students.find({gpa:4.0})
[
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4
  }
]
school> db.students.find({fullTime:false})
[
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.find({gpa:4.0, fullTime:true})

school> db.students.find({}, {name:true})
[
  { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' },
  { _id: ObjectId('678b81242b37630ca7e8b9c0'), name: 'Spongebob' },
  { _id: ObjectId('678b82952b37630ca7e8b9c1'), name: 'Patrick' },
  { _id: ObjectId('678b82952b37630ca7e8b9c2'), name: 'Sandy' },
  { _id: ObjectId('678b82952b37630ca7e8b9c3'), name: 'Gary' },
  { _id: ObjectId('678b88be2b37630ca7e8b9c4'), name: 'Larry' },
  { _id: ObjectId('678b8a242b37630ca7e8b9c5'), name: 'Larry' }
]
school> db.students.find({},{_id:false, name:true})
[
  { name: 'Spongebob' },
  { name: 'Spongebob' },
  { name: 'Patrick' },
  { name: 'Sandy' },
  { name: 'Gary' },
  { name: 'Larry' },
  { name: 'Larry' }
]
school> db.students.find({},{_id:false, name:true, gpa:true})

[
  { name: 'Spongebob' },
  { name: 'Spongebob', gpa: 0.2 },
  { name: 'Patrick', gpa: 1.5 },
  { name: 'Sandy', gpa: 4 },
  { name: 'Gary', gpa: 2.5 },
  { name: 'Larry', gpa: 2.8 },
  { name: 'Larry', gpa: 2.8 }
]
school> db.students.updateOne({name:"Spongebob"},{$set:{fullT
fullTime:true}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
school> db.students.find({name:"spongebob"})

school> db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf'),{$set:{fullTime:true}})
Uncaught:
SyntaxError: Unexpected token (1:66)

> 1 | db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf'),{$set:{fullTime:true}})
    |                                                                   ^
  2 |

school>  db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf'),{$set:{fullTime:false}})
Uncaught:
SyntaxError: Unexpected token (1:67)

> 1 |  db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf'),{$set:{fullTime:false}})
    |
            ^
  2 |

school> db.students.find({ db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf')})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:21)

> 1 | db.students.find({ db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf')})
    |                      ^
  2 |

school> db.students.find({ _id: ObjectId('678b80b42b37630ca7e8b9bf')})
[
  {
    _id: ObjectId('678b80b42b37630ca7e8b9bf'),
    name: 'Spongebob',
    fullTime: true
  }
]
school> db.students.updateOne({ _id: ObjectId('678b80b42b37630ca7e8b9bf')},{$unset:{fullTime:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
school> db.students.find({ _id: ObjectId('678b80b42b37630ca7e8b9bf')})
[ { _id: ObjectId('678b80b42b37630ca7e8b9bf'), name: 'Spongebob' } ]
school> db.students.updateMany({}, {$set:{fullTime:false}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 7,
  modifiedCount: 5,
  upsertedCount: 0
}
school> db.students.find()
[
  {
    _id: ObjectId('678b80b42b37630ca7e8b9bf'),
    name: 'Spongebob',
    fullTime: false
  },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5,
    fullTime: false
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.updateOne({name:"Gary"},{$unset:{fullTime
fullTime:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
school> db.students.updateOne({name:"sandy"},{$unset:{fullTim
fullTime:""}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0
}
school> db.students.find()
[
  {
    _id: ObjectId('678b80b42b37630ca7e8b9bf'),
    name: 'Spongebob',
    fullTime: false
  },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.updateMany({fullTime:{$exists:false}})
MongoInvalidArgumentError: Update document requires atomic operators
school> db.students.updateMany({fullTime:{$exists:false}}, {$
$set:fullTime:true}})
Uncaught:
SyntaxError: Unexpected token, expected "," (1:65)

> 1 | db.students.updateMany({fullTime:{$exists:false}}, {$set:fullTime:true}})
    |
          ^
  2 |

school> db.students.updateMany({fullTime:{$exists:false}}, {$
$set:{fullTime:true}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
school> db.students.find()
[
  {
    _id: ObjectId('678b80b42b37630ca7e8b9bf'),
    name: 'Spongebob',
    fullTime: false
  },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5,
    fullTime: true
  },
  {
    _id: ObjectId('678b88be2b37630ca7e8b9c4'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.deleteOne({name:"Larry"})
{ acknowledged: true, deletedCount: 1 }
school> db.students.find()
[
  {
    _id: ObjectId('678b80b42b37630ca7e8b9bf'),
    name: 'Spongebob',
    fullTime: false
  },
  {
    _id: ObjectId('678b81242b37630ca7e8b9c0'),
    name: 'Spongebob',
    age: 30,
    gpa: 0.2,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c1'),
    name: 'Patrick',
    age: 38,
    gpa: 1.5,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c2'),
    name: 'Sandy',
    age: 27,
    gpa: 4,
    fullTime: false
  },
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5,
    fullTime: true
  },
  {
    _id: ObjectId('678b8a242b37630ca7e8b9c5'),
    name: 'Larry',
    age: 32,
    gpa: 2.8,
    fullTime: false,
    registerDate: ISODate('2025-01-18T11:01:56.684Z'),
    gradutionDate: null,
    courses: [ 'Biology', 'chemistry', 'calculus' ],
    address: { street: 'Bikini Bottom', city: '123 Fake st.', zip: 12345 }
  }
]
school> db.students.deleteMany({fullTime:false})
{ acknowledged: true, deletedCount: 5 }
school> db.students.find()
[
  {
    _id: ObjectId('678b82952b37630ca7e8b9c3'),
    name: 'Gary',
    age: 18,
    gpa: 2.5,
    fullTime: true
  }
]
school> db.students.deleteMany({registerDate:{$exists:false}}
)
{ acknowledged: true, deletedCount: 1 }
school> db.students.find({name:{$ne:"spongebob"}})

school> db.students.find({age:{$1t:20}})
MongoServerError: unknown operator: $1t
school> db.students.find({age:{$1te:27}})
MongoServerError: unknown operator: $1te
school> db.students.find({age:{$gte:20}})

school> db.students.find({gpa:{$gte:3,$1te:4}}):
Uncaught:
SyntaxError: Missing semicolon. (1:39)

> 1 | db.students.find({gpa:{$gte:3,$1te:4}}):
    |                                        ^
  2 |

school> db.students.find({age:{$gte:20}})

school> db.students.find({name:{$in:{"sponegebob","Patrick","
sandy"]}})
Uncaught:
SyntaxError: Unexpected token (1:41)

> 1 | db.students.find({name:{$in:{"sponegebob","Patrick","sandy"]}})
    |                                          ^
  2 |

school> db.students.find({name:{$nin:{"Spongebob","patrick","
sandy"]}})
Uncaught:
SyntaxError: Unexpected token (1:41)

> 1 | db.students.find({name:{$nin:{"Spongebob","patrick","sandy"]}})
    |                                          ^
  2 |

school> db.students.find({$and: [{fullTime:true}, {age:{$1te:
22}}]})
MongoServerError: unknown operator: $1te
school> db.students.find({$or: [{fullTime:true},  {age:{$1te:
22}}]})
MongoServerError: unknown operator: $1te
school> db.students.find({$nor: [{fullTime:true}, {age:{$1te:
22}}]})
MongoServerError: unknown operator: $1te
school> db.students.find({age:{$1t:30}})
MongoServerError: unknown operator: $1t
school> db.students.find({age:{$not:{$gte:30}}})

school> db.students.find({name:"Larry"}).explain("executionSt
ats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'school.students',
    indexFilterSet: false,
    parsedQuery: { name: { '$eq': 'Larry' } },
    queryHash: 'A2F868FD',
    planCacheKey: 'A2F868FD',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'COLLSCAN',
      filter: { name: { '$eq': 'Larry' } },
      direction: 'forward'
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 0,
    executionTimeMillis: 3,
    totalKeysExamined: 0,
    totalDocsExamined: 0,
    executionStages: {
      stage: 'COLLSCAN',
      filter: { name: { '$eq': 'Larry' } },
      nReturned: 0,
      executionTimeMillisEstimate: 0,
      works: 1,
      advanced: 0,
      needTime: 0,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      direction: 'forward',
      docsExamined: 0
    }
  },
  command: { find: 'students', filter: { name: 'Larry' }, '$db': 'school' },
  serverInfo: {
    host: 'DESKTOP-6U95IEJ',
    port: 27017,
    version: '7.0.5',
    gitVersion: '7809d71e84e314b497f282ea8aa06d7ded3eb205'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted'
  },
  ok: 1
}
school> db.students.createIndex({name:1})
name_1
school> db.students.find({name:"Larry"}).explain("executionSt
ats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'school.students',
    indexFilterSet: false,
    parsedQuery: { name: { '$eq': 'Larry' } },
    queryHash: 'A2F868FD',
    planCacheKey: 'A3E454E0',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'FETCH',
      inputStage: {
        stage: 'IXSCAN',
        keyPattern: { name: 1 },
        indexName: 'name_1',
        isMultiKey: false,
        multiKeyPaths: { name: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { name: [ '["Larry", "Larry"]' ] }
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 0,
    executionTimeMillis: 9,
    totalKeysExamined: 0,
    totalDocsExamined: 0,
    executionStages: {
      stage: 'FETCH',
      nReturned: 0,
      executionTimeMillisEstimate: 0,
      works: 1,
      advanced: 0,
      needTime: 0,
      needYield: 0,
      saveState: 0,
      restoreState: 0,
      isEOF: 1,
      docsExamined: 0,
      alreadyHasObj: 0,
      inputStage: {
        stage: 'IXSCAN',
        nReturned: 0,
        executionTimeMillisEstimate: 0,
        works: 1,
        advanced: 0,
        needTime: 0,
        needYield: 0,
        saveState: 0,
        restoreState: 0,
        isEOF: 1,
        keyPattern: { name: 1 },
        indexName: 'name_1',
        isMultiKey: false,
        multiKeyPaths: { name: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { name: [ '["Larry", "Larry"]' ] },
        keysExamined: 0,
        seeks: 1,
        dupsTested: 0,
        dupsDropped: 0
      }
    }
  },
  command: { find: 'students', filter: { name: 'Larry' }, '$db': 'school' },
  serverInfo: {
    host: 'DESKTOP-6U95IEJ',
    port: 27017,
    version: '7.0.5',
    gitVersion: '7809d71e84e314b497f282ea8aa06d7ded3eb205'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted'
  },
  ok: 1
}
school> db.students.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { name: 1 }, name: 'name_1' }
]
school> db.students.dropIndex("name_1")
{ nIndexesWas: 2, ok: 1 }
school> show collections
students
school> db.createCollection("teachers")
{ ok: 1 }
school> db.createCollection("teachers", {capped:true, size:10000000000, max:100}, {autoIndexId:false})
MongoServerError: namespace school.teachers already exists, but with different options: { uuid: UUID("2cad1b92-a1a6-499b-ae61-cef6b2425cc6") }
school> show collections
students
teachers
school> db.createCollection("course")
{ ok: 1 }
school> db.courses.drop()
true
school> showcollections
ReferenceError: showcollections is not defined
school> show collections
course
students
teachers
school>
(To exit, press Ctrl+C again or Ctrl+D or type .exit)
school>











